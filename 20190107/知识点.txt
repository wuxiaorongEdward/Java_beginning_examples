栈的特点：
1、存储局部变量
  在方法中定义的，或形式参数
2、局部变量必须先定义，后赋值，然后再使用

堆内存的特点：
1、所有new 出来的东西都在堆内存中，每一个new出来的都有一个地址，标记
堆内存中的数据都由默认值：
  int: 0
  double/float ; 0.0
  boolean: false
  char:   '\u0000'  空字符
  String : null
  所有引用类型都为null.
3、生命周期
栈内存使用完立马从内存中消失
堆内存不会立马消失，在jvm空闲时或着内存不足时有jvm 垃圾管理机制自动回收。

    （1）int[] array = new int[5];  （常用）
	System.out.println(array);  //输出的时地址
	
如何在使用完后人为把对象变成垃圾：   array = null;

  int[] arr = array ;   //没有new没有开辟空间，同样指向同一个内存空间地址
  arr = null;//没有垃圾，因为这一块地址还有array引用
    
	 （2） 元数数据类型[] 数组名 = new 数据元数类型[] {元素1， 元素2， ....}； 
	       元素类型 [] 数组名 = {元素1， 元素2， ...}；  (常用)
		   
		   数组提供了一个数组熟悉length表示数组的元素的个数：   arr.length
		   
Java中的参数传递问题：
    基本类型： 形式参数的改变不影响实际参数的改变
	引用数据类型： 形式参数的 改变直接影响实际参数的改变
	java中只有值传递，地址也属于值，不存在应用传递
   三大内存： 栈，堆，方法区
   
二维数组：
     元素类型[][] 变量名 = new 元素类型[rows][cols];
	 （1）int [][] arr = new int[2][3];
	 arr 代表的地址  arr[i]  也是地址
	 （2） 元素类型[][] arr = new 元素类型[rows][];  //只给行，变长数组
	   int[][] arr = new int[2][];
	   arr[0] = new int[3];
	   arr[1] = new int[4];
	   (3)定义二维数组时就明确元素
	   int[][] arr = {{1,2,3 }, {3, 4,5 }, ...};
	 