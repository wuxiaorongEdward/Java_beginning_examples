java中oop的特性之一：  多态
多态：同一个对象，在不同的时刻表现出不同的状态
    父类的引用指向子类
   
    多态的前提：  要有继承的关系
                  要有方法的重写
				  要有父类引用指向子类对象
		    没有方法的重写的多态是没有意义的
		
	多态中成员的关系： 
		        成员变量 ：  编译要看左边，左边没有就报错，运行看左边
				成员方法： 编译看左边，左边没有就报错，运行看右边
		注意： 是因为方法有重写，变量没有重写
		弊端： 父类不能使用子类的功能
		
		
       多态的好处: 提高程序的可维护性和扩展性

       多态中的问题：
               向下转型是会出现异常
	
abstract 类型
        如何一个方法只有方法声明，没有方法体，那么这个方法是不是具体的，是抽象的，
     使用关键字： abstract,  在一个类中抽象方法是没有意义的，将来如果有一个类继承
     这个类，是要必须重写该方法。
     如果一个类中有抽象方法，则该类必须定义为抽象类。
             abstract class Demo {
                    public abstract void show();
                }
            作用： 强制子类必须完成某些功能。
   
      抽象类的特点：
          抽象方法必须有abstract修饰
		  抽象方法所在的类肯定是抽象类
		  抽象类中不一定有抽象方法
		  抽象类不能被实例化， 不能有new 创建
		  抽象类用其子类实例化
		  子类继承父类，要么子类是抽象类，要么子类重写父类的抽象方法
		  
		  抽象类中： 
		   成员方法：既可以是常量，也可以是变量
		   成员方法：可以是抽象的，也可以是一般的方法
		   构造方法： 有
		  面试题： 抽象类不能被实例化，但却有构造方法，请问有什么用？
			          答：用于子类访问父类数据进行初始化使用。
					   
					   
接口： 可以理解为一种抽象类（理解）
    关键字： interface
           interface 接口名 {
	                 }
           class 类名 implements 接口名 {     //类实现接口 
                          }
           接口定义的几个特点：  
                 接口用interface进行定义
	             一个类实现接口用implements实现
		
		    接口中成元的特点：
		            成员变量： 接口中只有常量  默认  public static final
			        构造方法:   没有构造方法
			        成员方法： 接口中只有抽象方法   默认为abstract   (推荐写的时候不上默认的内容)
			  
			  接口中可以使用多态
			  
			  多态的表现： 具体类多态
			               抽象类多态
						   接口多态
							
			接口的思想： 接口是对外暴露的规则。
			             接口是程序的功能的扩展
						 接口的现降低了耦合性
						        耦合性： 类一类的关联关系
								高内聚： 自己完成功能的能力
						      	程序： 低耦合  高内聚：
                                效率和安全
                        接口可以用来多实现	
             单一原则： 接口在定义规范的时候，尽量单一规范

    接口的实现特点：    要么本身是抽象类
                        要么类实现接口的所有功能
    类与接口的关系：
                   实现关系， 可以单实现，也可以多实现
                   它还可以在继承一个类的同时实现多个接口
    类与类的关系； 单一继承， 多层继承
    接口与接口可以继承关系，可以单一继承，也可以多继承	

面试题： 类与接口的关系： 实现关系， 并且可以多实现
         java中有多继承吗？ java中类没有多继承，接口有多继承	

接口与抽象类
        共性：  都是不断抽取的东西
        不同点： 
                A；抽象类或者接口的 区别
                       抽象类：
                             成员变量：既可以是常量也可以是变量
                             构造方法：有；用于子类访问父类的数据进行初始化
                             成员方法：可以是抽象的，也可以是一般的方法
                        接口：  
                              成员变量： 只有常量，默认为public static final 
                              成员方法： 只有抽象方法 默认为public abstract
                              构造方法： 没有						  
		        B: 类与接口的关系： 
                        类与类的关系： 
                                继承关系： 单继承，可以多层继承
                    类与接口的关系：  
                                实现关系，可以单实现，也可以多实现
                    接口与接口的关系
                                继承关系，可以单继承，也可以多继承
                C:  本质特征（什么时候用抽象类， 什么时候用接口设计）	
                                抽象类被继承体现的是：  is a 的关系， 抽象定义是这个体系中的共性
                                接口实现的是like a 的关系，接口定义的是这个体系的扩展功能

面向对象思想：  1、有那些类 2、类的功能 3、类间的关系
分析的时候，是按照从具体到抽象
实现的时候是按照从抽象到具体

1:抽象类中是否有构造方法?假设有,而抽象类本身不能被实例化，那么，构造方法有什么意义。
    有。
    用于对子类访问父类的数据进行初始化。

2:抽象关键字abstract不可以和哪些关键字共存？
       A:final final修饰的方法不能被重写，而abstract修饰必须被重写。冲突。
       B:private private修饰的方法不能被重写，而abstract修饰必须被重写。冲突。
       C:static static修饰的方法，可以直接通过类名调用，而abstract修饰的方法没有方法体，调用没有意义。

3:抽象类中可不可以没有抽象方法?假设可以，有什么意义。
        可以。
        为了不让外界创建对象。				  